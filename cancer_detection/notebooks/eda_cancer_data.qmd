---
title: "Profile Cancer Data"
format:
    html:
        toc: true
        numberSections: true
        toc-depth: 4
---

## Libraries
```{python}
import os
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from functions import load_last_csv_from_directory, classify_columns, plot_binary_column, plot_histogram_with_density, plot_boxplot, plot_contingency_heatmap, continus_vs_diagnosis_boxplot
```

## Loading data
```{python}
# ========== Loading Data ==========
# Load the last CSV file from the directory
df = load_last_csv_from_directory('datasets')
```

## EDA

### Info

```{python}
df.head()
```

```{python}
df.describe().T
```

```{python}
df.info()
```

```{python}
df.isnull().sum()
```

```{python}
df.isnull().sum() / len(df) * 100
```

```{python}
sns.heatmap(df.isna());
plt.title('Visualization of NAs in dataset')
```

### Columns clasification

```{python}
classify_columns(df)
```

### Binary data distribution visualization
```{python}
#| fig-cap: Distribution of diagnosis
dataframe = df
column = 'Diagnosis'
title = 'Distibution of diagnosis'
category1_name = 'No cancer'
category2_name = 'Cancer'
plot_binary_column(dataframe, column, title, category1_name, category2_name)
```

```{python}
#| fig-cap: Distribution of gender
dataframe = df
column = 'Gender'
title = 'Distibution of gender'
category1_name = 'Male'
category2_name = 'Female'
plot_binary_column(dataframe, column, title, category1_name, category2_name)
```

```{python}
#| fig-cap: Distribution of smoking
dataframe = df
column = 'Smoking'
title = 'Distibution of smoking'
category1_name = 'No smoking'
category2_name = 'Smoking'
plot_binary_column(dataframe, column, title, category1_name, category2_name)
```

```{python}
#| fig-cap: Distribution of cancer history
dataframe = df
column = 'CancerHistory'
title = 'Distibution of cancer history'
category1_name = 'No cancer history'
category2_name = 'Cancer history'
plot_binary_column(dataframe, column, title, category1_name, category2_name)
```

### Category data distribution visualization
```{python}
#| fig-cap: Distribution of genetic risk
# Map numeric values to labels
df['GeneticRisk'] = df['GeneticRisk'].map({0: 'Low', 1: 'Medium', 2: 'High'})

# Now, calculate 'value_counts' after mapping
value_counts = df['GeneticRisk'].value_counts()

# Generate unique colors for each value in 'GeneticRisk'
colors = sns.color_palette("hsv", len(value_counts))

# Create the bar plot assigning a color to each bar
plt.figure(figsize=(10, 6))
sns.barplot(x=value_counts.index, y=value_counts.values, palette='coolwarm')

# Add title and labels
plt.title('Distribution of Genetic Risk')
plt.xlabel('Genetic Risk')
plt.ylabel('Frequency')

# Show the plot
plt.show()
```

### Continuous data distribution visualization
```{python}
#| fig-cap: Histogram of age
dataframe = df
column = 'Age'
bins=30
title = 'Age histogram'
plot_histogram_with_density(df, column, bins, title)
```

```{python}
#| fig-cap: Age boxplot
dataframe = df
column = 'Age'
title = 'Age boxplot'
plot_boxplot(df, column, title)
```

```{python}
#| fig-cap: Histogram of BMI
dataframe = df
column = 'BMI'
bins=30
title = 'Body Mass Index histogram'
plot_histogram_with_density(df, column, bins, title)
```

```{python}
#| fig-cap: BMI boxplot
dataframe = df
column = 'Age'
title = 'Body Mass Index boxplot'
plot_boxplot(df, column, title)
```

```{python}
#| fig-cap: Histogram of Physical Activity
dataframe = df
column = 'PhysicalActivity'
bins=30
title = 'Physical Activity histogram'
plot_histogram_with_density(df, column, bins, title)
```

```{python}
#| fig-cap: Physical Activity boxplot
dataframe = df
column = 'PhysicalActivity'
title = 'Physical Activity boxplot'
plot_boxplot(df, column, title)
```

```{python}
#| fig-cap: Histogram of AlcoholIntake
dataframe = df
column = 'AlcoholIntake'
bins=30
title = 'Number of alcohol units consumed per week histogram'
plot_histogram_with_density(df, column, bins, title)
```

```{python}
#| fig-cap: Age boxplot
dataframe = df
column = 'AlcoholIntake'
title = 'Number of alcohol units consumed per week boxplot'
plot_boxplot(df, column, title)
```

### Correlation heatmap
```{python}
#| fig-cap: Correlation heatmap with Diagnosis
plt.figure(figsize=(8, 10))
sns.heatmap(df.corr()[['Diagnosis']].sort_values(by='Diagnosis', ascending=False), annot=True, cmap='Reds', vmin=-1, vmax=1)
plt.title('Correlation with Diagnosis', fontsize=12)
plt.show()
```

### Binary and categorical data correlation heatmap

```{python}
#| fig-cap: Correlation heatmap gender vs diagnosis
dataframe = df
column = 'Gender'
plot_contingency_heatmap(dataframe, column)
```

```{python}
#| fig-cap: Correlation heatmap smoking vs diagnosis
dataframe = df
column = 'Smoking'
plot_contingency_heatmap(dataframe, column)
```

```{python}
#| fig-cap: Correlation heatmap cancer history vs diagnosis
dataframe = df
column = 'CancerHistory'
plot_contingency_heatmap(dataframe, column)
```

```{python}
#| fig-cap: Correlation heatmap genetic risk vs diagnosis
dataframe = df
column = 'GeneticRisk'
plot_contingency_heatmap(dataframe, column)
```

### Continuous data correlation heatmap

```{python}
#| fig-cap: Continuos data correlation heatmap
sns.pairplot(df, vars=['Age', 'BMI', 'PhysicalActivity', 'AlcoholIntake'], hue='Diagnosis')
plt.show()
```

### Box Plots for Continuous Features by Diagnosis

```{python}
#| fig-cap: Box Plots for Age by Diagnosis
dataframe = df
column = 'Age'
vs_column = 'Diagnosis'
title = 'Box Plots for Age by Diagnosis'
continus_vs_diagnosis_boxplot(dataframe, column, vs_column, title)
```

```{python}
#| fig-cap: Box Plots for BMI by Diagnosis
dataframe = df
column = 'BMI'
vs_column = 'Diagnosis'
title = 'Box Plots for BMI by Diagnosis'
continus_vs_diagnosis_boxplot(dataframe, column, vs_column, title)
```

```{python}
#| fig-cap: Box Plots for Physical Activity  by Diagnosis
dataframe = df
column = 'PhysicalActivity'
vs_column = 'Diagnosis'
title = 'Box Plots for Physical Activity by Diagnosis'
continus_vs_diagnosis_boxplot(dataframe, column, vs_column, title)
```

```{python}
#| fig-cap: Box Plots for number of alcohol units consumed per week by Diagnosis
dataframe = df
column = 'AlcoholIntake'
vs_column = 'Diagnosis'
title = 'Box Plots for number of alcohol units consumed per week by Diagnosis'
continus_vs_diagnosis_boxplot(dataframe, column, vs_column, title)
```