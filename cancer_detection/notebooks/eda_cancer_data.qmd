---
title: "Profile Cancer Data"
format:
    html:
        toc: true
        numberSections: true
        toc-depth: 4
---

## Libraries
```{python}
import os
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from functions import load_last_csv_from_directory, classify_columns, plot_binary_column, plot_histogram_with_density
```

## Loading data
```{python}
# ========== Loading Data ==========
# Load the last CSV file from the directory
df = load_last_csv_from_directory('datasets')
```

## EDA

### Head

```{python}
df.head()
```

### Columns clasification

```{python}
classify_columns(df)
```

### Binary data distribution visualization
```{python}
#| fig-cap: Distribution of diagnosis
dataframe = df
column = 'Diagnosis'
title = 'Distibution of diagnosis'
category1_name = 'No cancer'
category2_name = 'Cancer'
plot_binary_column(dataframe, column, title, category1_name, category2_name)
```

```{python}
#| fig-cap: Distribution of gender
dataframe = df
column = 'Gender'
title = 'Distibution of gender'
category1_name = 'Male'
category2_name = 'Female'
plot_binary_column(dataframe, column, title, category1_name, category2_name)
```

```{python}
#| fig-cap: Distribution of smoking
dataframe = df
column = 'Smoking'
title = 'Distibution of smoking'
category1_name = 'No smoking'
category2_name = 'Smoking'
plot_binary_column(dataframe, column, title, category1_name, category2_name)
```

```{python}
#| fig-cap: Distribution of cancer history
dataframe = df
column = 'CancerHistory'
title = 'Distibution of cancer history'
category1_name = 'No cancer history'
category2_name = 'Cancer history'
plot_binary_column(dataframe, column, title, category1_name, category2_name)
```

### Category data distribution visualization
```{python}
#| fig-cap: Distribution of genetic risk
# Map numeric values to labels
df['GeneticRisk'] = df['GeneticRisk'].map({0: 'Low', 1: 'Medium', 2: 'High'})

# Now, calculate 'value_counts' after mapping
value_counts = df['GeneticRisk'].value_counts()

# Generate unique colors for each value in 'GeneticRisk'
colors = sns.color_palette("hsv", len(value_counts))

# Create the bar plot assigning a color to each bar
plt.figure(figsize=(10, 6))
sns.barplot(x=value_counts.index, y=value_counts.values, palette='coolwarm')

# Add title and labels
plt.title('Distribution of Genetic Risk')
plt.xlabel('Genetic Risk')
plt.ylabel('Frequency')

# Show the plot
plt.show()
```

### Continuous data distribution visualization
```{python}
#| fig-cap: Histogram of age
dataframe = df
column = 'Age'
bins=30
title = 'Age histogram'
plot_histogram_with_density(df, column, bins, title)
```

```{python}